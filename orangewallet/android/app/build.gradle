def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.orange.wallet"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
    packagingOptions {
        pickFirst 'org/bouncycastle/x509/*'
        pickFirst 'org/komputing/*'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }

}
configurations.all {
    resolutionStrategy.dependencySubstitution {
        substitute module('com.github.komputing.kethereum:rpc:0.83.0') with module('com.github.abhimanyu121:kethereum:custom')
        substitute module('com.github.komputing.kethereum:model:0.83.0') with module('com.github.abhimanyu121.kethereum:model:custom')
        substitute module('com.github.komputing.kethereum:extensions_kotlin:0.83.0') with module('com.github.abhimanyu121.kethereum:extensions_kotlin:custom')
        substitute module('com.github.abhimanyu121.kethereum:crypto_impl_spongycastle:custom') with module('com.github.abhimanyu121.kethereum:crypto_impl_bouncycastle:custom')
        substitute module('com.github.komputing.kethereum:types:0.83.0') with module('com.github.abhimanyu121.kethereum:types:custom')

    }
}
flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.github.WalletConnect:kotlin-walletconnect-lib:0.9.6'
    implementation "org.java-websocket:Java-WebSocket:1.4.0"
    implementation "com.github.komputing:khex:1.0.0"
    implementation 'com.squareup.moshi:moshi:1.8.0'
    implementation "com.squareup.okhttp3:okhttp:4.0.1"
    implementation "androidx.multidex:multidex:2.0.1"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.0'
    implementation 'com.google.android:flexbox:2.0.1'
    implementation 'org.web3j:core:4.6.0-android'
    implementation 'com.github.komputing:khash:1.1.0'

    //implementation 'com.github.abhimanyu121:KEthereum-custom:custom'
}

